1- Create [OR Replace ] procedure   id(argument) {as|is}[decls] begin  stmts   end;

case Tag.CREATE:
                        {
                            Stmt st1, st2;
                            match(Tag.CREATE);
                            if (look.tag == Tag.OR)
                            {
                                match(Tag.OR);
                                match(Tag.REPLACE);
                            }
                            Token t0 = look;
                            match(Tag.PROCEDURE);
                            Token t1 = look;
                            match(Tag.ID);
                            Id id0 = top.get(t0);
                            if (id0 == null) { error(t0.toString() + " undeclared "); }
                            top.put(t1,id0);
                            match('(');
                            while (look.tag == Tag.ID || look.tag == Tag.BASIC)
                            {

                                decls();//ÿ»⁄« ﬁ· ··œﬂ Ê— «‰ﬂ €Ì—  œ«·… «· ⁄—Ì› Ê —ﬂ Â«  ﬁ»· »⁄œ «·„ €Ì—«  ›«’·Â (,)
                                
                            }
                            match(')');
                            if (look.tag == Tag.AS)
                            {
                                match(Tag.AS);
                            }
                            else if (look.tag == Tag.IS)
                                match(Tag.IS);
                            if (look.tag == Tag.BASIC)
                                decls();
                            match(Tag.BEGIN); st2 = stmt(); match(Tag.END);
                            match(';');
                            return new Function(id0, st2);
                        }

#flex
stmt:
	 
	| CREATE PROCEDURE ID LEFT_PARENTHESIS argumnet RIGHT_PARENTHESIS  {AS|IS} BEGIN stmts END;
	| CREATE OR REPLACE PROCEDURE ID LEFT_PARENTHESIS argumnet RIGHT_PARENTHESIS datatype {AS|IS} decler BEGIN stmts END;
