using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
/*We  begin with class Constant .  The  constructor Constant   takes 
a  token  tok and a  type p  as  parameters.  It  constructs  a  leaf  in  the  syntax 
tree with  label tok  and type p.  For convenience,  the constructor Constant  is 
overloaded  to create a constant object from an  integer. */
namespace lexer
{
    public class Constant : Expr{
    public  Constant(Token tok,Type1 p):base(tok,p){   }
    public Constant(int i):base(new NUM(i),Type1.Int){}
    public static  Constant
    True=new Constant(Word.True,Type1.Bool),
    False=new Constant(Word.False,Type1.Bool);
    /*Jumping code for  a  boolean  expression B  is  generated by method  jumping, 
which takes two  labels t and f  as parameters, called the true and false exits of  B, respectively.  
The code contains a jump to t  if B  evaluates to true, and ajump  to f  if B evaluates to false. 
 By convention, the special label 0 means that 
control falls through B to the next instruction after the code for B. */
    public override void jumping(int t, int f)
    {
    if(this==True&&t!=0){
        emit("goto L"+t);}
    else if(this==False &&f!=0){emit("goto L"+f);}}
    }
}
